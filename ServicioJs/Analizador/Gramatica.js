/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,4],$V2=[2,5,7],$V3=[1,20],$V4=[1,22],$V5=[1,26],$V6=[1,23],$V7=[1,24],$V8=[1,25],$V9=[1,27],$Va=[1,31],$Vb=[7,9,12,30,61,62,63,64],$Vc=[1,37],$Vd=[1,40],$Ve=[1,41],$Vf=[7,12],$Vg=[9,24],$Vh=[1,53],$Vi=[1,54],$Vj=[1,55],$Vk=[1,56],$Vl=[1,57],$Vm=[1,58],$Vn=[1,65],$Vo=[1,66],$Vp=[1,67],$Vq=[1,68],$Vr=[1,69],$Vs=[1,70],$Vt=[1,71],$Vu=[1,72],$Vv=[1,73],$Vw=[1,74],$Vx=[1,75],$Vy=[1,76],$Vz=[1,77],$VA=[2,103],$VB=[1,80],$VC=[9,21,23,24,30,35,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82],$VD=[7,9,12,30,47,48,49,50,51,52,56,61,62,63,64],$VE=[9,21,23,30,61,62,63,64,78,79,80,81,82],$VF=[9,21,23,24,30,35,61,62,63,64,65,66,67,68,69,70,71,78,79,80,81,82],$VG=[9,21,23,24,30,35,61,62,63,64,65,66,67,68,69,70,71,72,73,78,79,80,81,82],$VH=[9,21,23,24,30,35,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,78,79,80,81,82],$VI=[1,141],$VJ=[1,134],$VK=[1,135],$VL=[1,136],$VM=[1,137],$VN=[1,138],$VO=[1,139],$VP=[1,140],$VQ=[9,12,30,47,48,49,50,51,52,56,61,62,63,64],$VR=[1,211],$VS=[9,12,30,47,48,49,50,51,52,55,56,61,62,63,64],$VT=[9,10,12,30,47,48,49,50,51,52,56,61,62,63,64];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"INICIO":4,"EOF":5,"INI":6,"PR_public":7,"PR_class":8,"ID":9,"LL_ABRE":10,"LC":11,"LL_CIERRA":12,"PR_interface":13,"LI":14,"C":15,"MI":16,"DEC":17,"ASIG":18,"I":19,"TP":20,"P_ABRE":21,"LP":22,"P_CIERRA":23,"PyC":24,"TIPO":25,"PR_void":26,"LINS":27,"PR_static":28,"PR_main":29,"PR_String":30,"C_ABRE":31,"C_CIERRA":32,"PR_args":33,"P":34,"Coma":35,"EXP":36,"LDEC":37,"D":38,"Igual":39,"INS":40,"FOR":41,"WHILE":42,"DO":43,"IF":44,"PRINT":45,"LLM":46,"PR_break":47,"PR_continue":48,"PR_return":49,"PR_for":50,"PR_while":51,"PR_if":52,"LEIE":53,"EIE":54,"PR_else":55,"PR_System":56,"Punto":57,"PR_out":58,"PR_print":59,"PR_println":60,"PR_int":61,"PR_boolean":62,"PR_double":63,"PR_char":64,"AND":65,"OR":66,"XOR":67,"Menor":68,"Mayor":69,"MayorIgual":70,"MenorIgual":71,"IgualIgual":72,"Distinto":73,"Mas":74,"Menos":75,"Multiplicacion":76,"Division":77,"NUMBER":78,"CADENA":79,"CARACTER":80,"true":81,"false":82,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"PR_public",8:"PR_class",9:"ID",10:"LL_ABRE",12:"LL_CIERRA",13:"PR_interface",21:"P_ABRE",23:"P_CIERRA",24:"PyC",26:"PR_void",28:"PR_static",29:"PR_main",30:"PR_String",31:"C_ABRE",32:"C_CIERRA",33:"PR_args",35:"Coma",39:"Igual",47:"PR_break",48:"PR_continue",49:"PR_return",50:"PR_for",51:"PR_while",52:"PR_if",55:"PR_else",56:"PR_System",57:"Punto",58:"PR_out",59:"PR_print",60:"PR_println",61:"PR_int",62:"PR_boolean",63:"PR_double",64:"PR_char",65:"AND",66:"OR",67:"XOR",68:"Menor",69:"Mayor",70:"MayorIgual",71:"MenorIgual",72:"IgualIgual",73:"Distinto",74:"Mas",75:"Menos",76:"Multiplicacion",77:"Division",78:"NUMBER",79:"CADENA",80:"CARACTER",81:"true",82:"false"},
productions_: [0,[3,2],[4,2],[4,1],[6,6],[6,5],[6,6],[6,5],[6,1],[11,2],[11,1],[15,1],[15,1],[15,1],[14,2],[14,1],[19,7],[19,6],[20,1],[20,1],[16,9],[16,8],[16,8],[16,7],[16,7],[16,6],[16,13],[16,12],[22,2],[22,1],[34,2],[34,3],[34,1],[34,2],[17,3],[37,2],[37,1],[38,4],[38,3],[38,7],[38,6],[38,6],[38,5],[38,2],[38,1],[18,4],[18,7],[18,6],[27,2],[27,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,2],[40,2],[40,3],[40,2],[41,11],[41,10],[42,7],[42,6],[43,9],[43,8],[44,8],[44,7],[44,7],[44,6],[53,2],[53,1],[54,8],[54,7],[54,4],[54,3],[46,5],[46,4],[45,9],[45,9],[45,8],[25,1],[25,1],[25,1],[25,1],[25,1],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1]
    
break;
case 2: case 9: case 14: case 28: case 35: case 48: case 72:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 10: case 15: case 49:
 this.$ = [$$[$0]]; 
break;
case 4:
 this.$ = instruccionesAPI.nuevoClase($$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 5:
 this.$ = instruccionesAPI.nuevoClaseV($$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 6:
 this.$ = instruccionesAPI.nuevoInter($$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 7:
 this.$ = instruccionesAPI.nuevoInterV($$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 8:
 this.$ = CErrores.Errores.add(new CNodoError.NodoError("Sintactico", "Se detecto error en una instruccion." ,yylineno, yylloc.first_column)) 
break;
case 11: case 12: case 13: case 18: case 19:
this.$ = $$[$0]
break;
case 16: case 24:
 this.$ = instruccionesAPI.nuevoMD_P($$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
break;
case 17: case 25:
 this.$ = instruccionesAPI.nuevoMD_SP($$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
break;
case 20:
 this.$ = instruccionesAPI.nuevoMI_P($$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2]);
break;
case 21:
 this.$ = instruccionesAPI.nuevoMI_SP($$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2]);
break;
case 22:
 this.$ = instruccionesAPI.nuevoMI_S($$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2]);
break;
case 23:
 this.$ = instruccionesAPI.nuevoMI_S_P($$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2]);
break;
case 26:
 this.$ = instruccionesAPI.nuevoMAIN($$[$0-12],$$[$0-11],$$[$0-10],$$[$0-9],$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1]); 
break;
case 27:
 this.$ = instruccionesAPI.nuevoMAIN_S($$[$0-11],$$[$0-10],$$[$0-9],$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 29:
 this.$ = instruccionesAPI.nuevaListaPAR($$[$0]); 
break;
case 30:
 this.$ = instruccionesAPI.nuevoPA($$[$0-1],$$[$0]);
break;
case 31:
 this.$ = instruccionesAPI.nuevoPA_C($$[$0-2],$$[$0-1],$$[$0]);
break;
case 32:
 this.$ = instruccionesAPI.nuevoPA_E($$[$0]);
break;
case 33:
 this.$ = instruccionesAPI.nuevoPA_E($$[$0-1], $$[$0]);
break;
case 34:
 this.$ = instruccionesAPI.nuevoD_E($$[$0-2], $$[$0-1], $$[$0]);
break;
case 36:
 this.$ = instruccionesAPI.nuevaListaID($$[$0]); 
break;
case 37:
 this.$ = instruccionesAPI.nuevoD_E_C($$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 38:
 this.$ = instruccionesAPI.nuevoD_E($$[$0-2],$$[$0-1],$$[$0]); 
break;
case 39:
 this.$ = instruccionesAPI.nuevoD_LL_C($$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 40:
 this.$ = instruccionesAPI.nuevoD_LL($$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 41:
 this.$ = instruccionesAPI.nuevoD_LL_P_C($$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 42:
 this.$ = instruccionesAPI.nuevoD_LL_P($$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 43:
 this.$ = instruccionesAPI.nuevoD_C($$[$0-1],$$[$0]);
break;
case 44:
 this.$ = instruccionesAPI.nuevoD($$[$0]);
break;
case 45:
 this.$ = instruccionesAPI.nuevoA($$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
break;
case 46:
 this.$ = instruccionesAPI.nuevoA_LL($$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
break;
case 47:
 this.$ = instruccionesAPI.nuevoA_LL_P($$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
break;
case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57:
 this.$ = $$[$0]; 
break;
case 58:
 this.$ = instruccionesAPI.nuevobreak($$[$0-1], $$[$0]);
break;
case 59:
 this.$ = instruccionesAPI.nuevoContinue($$[$0-1], $$[$0]); 
break;
case 60:
 this.$ = instruccionesAPI.nuevoreturn_e($$[$0-2], $$[$0-1], $$[$0]); 
break;
case 61:
 this.$ = instruccionesAPI.nuevoreturn($$[$0-1], $$[$0], $$[$01]);
break;
case 62:
 this.$ = instruccionesAPI.nuevoFor($$[$0-10],$$[$0-9],$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0],$$[$01],$$[$02],$$[$03],$$[$04]);
break;
case 63:
 this.$ = instruccionesAPI.nuevoForV($$[$0-9],$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0],$$[$01],$$[$02],$$[$03],$$[$04]);
break;
case 64:
 this.$ = instruccionesAPI.nuevoWhile($$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
break;
case 65:
 this.$ = instruccionesAPI.nuevoWhileV($$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
break;
case 66:
 this.$ = instruccionesAPI.nuevodo($$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
break;
case 67:
 this.$ = instruccionesAPI.nuevodoV($$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
break;
case 68:
 this.$ = instruccionesAPI.nuevoif_e($$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
break;
case 69:
 this.$ = instruccionesAPI.nuevoifV_e($$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
break;
case 70:
 this.$ = instruccionesAPI.nuevoif($$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
break;
case 71:
 this.$ = instruccionesAPI.nuevoifV($$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
break;
case 73:
 this.$ = instruccionesAPI.nuevaListae($$[$0]); 
break;
case 74:
 this.$ = instruccionesAPI.nuevoe_i($$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
break;
case 75:
 this.$ = instruccionesAPI.nuevoe_ifV($$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
break;
case 76:
 this.$ = instruccionesAPI.nuevoe($$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
break;
case 77:
 this.$ = instruccionesAPI.nuevoeV($$[$0-2],$$[$0-1],$$[$0]);
break;
case 78:
 this.$ = instruccionesAPI.nuevoLLAMA_M($$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 79:
 this.$ = instruccionesAPI.nuevoLLAMA_M_V($$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 80: case 81:
 this.$ = instruccionesAPI.nuevoPrint($$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
break;
case 82:
 this.$ = instruccionesAPI.nuevoPrintV($$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
break;
case 83: case 84: case 85: case 86: case 87:
this.$ = $$[$0];
break;
case 88:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],Tipo_Operacion.AND);
break;
case 89:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],Tipo_Operacion.OR);
break;
case 90:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],Tipo_Operacion.XOR);
break;
case 91:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],Tipo_Operacion.MENOR_QUE);
break;
case 92:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],Tipo_Operacion.MAYOR_QUE);
break;
case 93:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],Tipo_Operacion.MAYOR_IGUAL);
break;
case 94:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],Tipo_Operacion.MENOR_IGUAL);
break;
case 95:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],Tipo_Operacion.IGUAL);
break;
case 96:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],Tipo_Operacion.NO_IGUAL);
break;
case 97:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],Tipo_Operacion.SUMA);
break;
case 98:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],Tipo_Operacion.RESTA);
break;
case 99:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],Tipo_Operacion.MULTIPLICACION);
break;
case 100:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],Tipo_Operacion.DIVISION);
break;
case 101:
 this.$ = $$[$0-1]; 
break;
case 102:
 this.$ = instruccionesAPI.nuevoValor(Tipo_Valor.NUMERO, $$[$0]); 
break;
case 103:
 this.$ = instruccionesAPI.nuevoValor(Tipo_Valor.IDENTIFICADOR, $$[$0]); 
break;
case 104:
 this.$ = instruccionesAPI.nuevoValor(Tipo_Valor.CADENA, $$[$0]); 
break;
case 105:
 this.$ = instruccionesAPI.nuevoValor(Tipo_Valor.CARACTER, $$[$0]); 
break;
case 106:
 this.$ = instruccionesAPI.nuevoValor(Tipo_Valor.TRUE, $$[$0]); 
break;
case 107:
 this.$ = instruccionesAPI.nuevoValor(Tipo_Valor.FALSE, $$[$0]); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1},{1:[3]},{2:$V0,5:[1,6],6:7,7:$V1},o($V2,[2,3]),{8:[1,8],13:[1,9]},o($V2,[2,8]),{1:[2,1]},o($V2,[2,2]),{9:[1,10]},{9:[1,11]},{10:[1,12]},{10:[1,13]},{7:$V3,9:$V4,11:14,12:[1,15],15:16,16:17,17:18,18:19,25:21,30:$V5,61:$V6,62:$V7,63:$V8,64:$V9},{7:$Va,12:[1,29],14:28,19:30},{7:$V3,9:$V4,12:[1,32],15:33,16:17,17:18,18:19,25:21,30:$V5,61:$V6,62:$V7,63:$V8,64:$V9},o($V2,[2,5]),o($Vb,[2,10]),o($Vb,[2,11]),o($Vb,[2,12]),o($Vb,[2,13]),{20:34,25:36,26:$Vc,28:[1,35],30:$V5,61:$V6,62:$V7,63:$V8,64:$V9},{9:$Vd,37:38,38:39},{39:$Ve},{9:[2,83]},{9:[2,84]},{9:[2,85]},{9:[2,86]},{9:[2,87]},{7:$Va,12:[1,42],19:43},o($V2,[2,7]),o($Vf,[2,15]),{20:44,25:36,26:$Vc,30:$V5,61:$V6,62:$V7,63:$V8,64:$V9},o($V2,[2,4]),o($Vb,[2,9]),{9:[1,45]},{26:[1,46]},{9:[2,18]},{9:[2,19]},{9:$Vd,24:[1,47],38:48},o($Vg,[2,36]),o($Vg,[2,44],{35:[1,50],39:[1,49]}),{9:[1,52],21:$Vh,36:51,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm},o($V2,[2,6]),o($Vf,[2,14]),{9:[1,59]},{21:[1,60]},{29:[1,61]},o([7,9,12,24,30,47,48,49,50,51,52,56,61,62,63,64],[2,34]),o($Vg,[2,35]),{9:[1,63],21:$Vh,36:62,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm},o($Vg,[2,43]),{24:[1,64],65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},o([24,65,66,67,68,69,70,71,72,73,74,75,76,77],$VA,{21:[1,78]}),{9:$VB,21:$Vh,36:79,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm},o($VC,[2,102]),o($VC,[2,104]),o($VC,[2,105]),o($VC,[2,106]),o($VC,[2,107]),{21:[1,81]},{9:$VB,21:$Vh,22:82,23:[1,83],25:85,30:$V5,34:84,36:86,61:$V6,62:$V7,63:$V8,64:$V9,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm},{21:[1,87]},o($Vg,[2,38],{35:[1,88],65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz}),o([9,24,35,65,66,67,68,69,70,71,72,73,74,75,76,77],$VA,{21:[1,89]}),o($VD,[2,45]),{9:$VB,21:$Vh,36:90,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm},{9:$VB,21:$Vh,36:91,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm},{9:$VB,21:$Vh,36:92,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm},{9:$VB,21:$Vh,36:93,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm},{9:$VB,21:$Vh,36:94,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm},{9:$VB,21:$Vh,36:95,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm},{9:$VB,21:$Vh,36:96,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm},{9:$VB,21:$Vh,36:97,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm},{9:$VB,21:$Vh,36:98,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm},{9:$VB,21:$Vh,36:99,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm},{9:$VB,21:$Vh,36:100,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm},{9:$VB,21:$Vh,36:101,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm},{9:$VB,21:$Vh,36:102,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm},{9:$VB,21:$Vh,22:103,23:[1,104],25:85,30:$V5,34:84,36:86,61:$V6,62:$V7,63:$V8,64:$V9,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm},{23:[1,105],65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},o($VC,$VA),{9:$VB,21:$Vh,22:106,23:[1,107],25:85,30:$V5,34:84,36:86,61:$V6,62:$V7,63:$V8,64:$V9,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm},{9:$VB,21:$Vh,23:[1,108],25:85,30:$V5,34:109,36:86,61:$V6,62:$V7,63:$V8,64:$V9,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm},{10:[1,110],24:[1,111]},o($VE,[2,29]),{9:[1,112]},o($VE,[2,32],{35:[1,113],65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz}),{30:[1,114]},o($Vg,[2,37]),{9:$VB,21:$Vh,22:115,23:[1,116],25:85,30:$V5,34:84,36:86,61:$V6,62:$V7,63:$V8,64:$V9,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm},o([9,21,23,24,30,35,61,62,63,64,65,78,79,80,81,82],[2,88],{66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz}),o([9,21,23,24,30,35,61,62,63,64,65,66,78,79,80,81,82],[2,89],{67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz}),o([9,21,23,24,30,35,61,62,63,64,65,66,67,78,79,80,81,82],[2,90],{68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz}),o($VF,[2,91],{72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz}),o($VF,[2,92],{72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz}),o($VF,[2,93],{72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz}),o($VF,[2,94],{72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz}),o($VG,[2,95],{74:$Vw,75:$Vx,76:$Vy,77:$Vz}),o($VG,[2,96],{74:$Vw,75:$Vx,76:$Vy,77:$Vz}),o($VH,[2,97],{76:$Vy,77:$Vz}),o($VH,[2,98],{76:$Vy,77:$Vz}),o($VC,[2,99]),o($VC,[2,100]),{9:$VB,21:$Vh,23:[1,117],25:85,30:$V5,34:109,36:86,61:$V6,62:$V7,63:$V8,64:$V9,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm},{24:[1,118]},o($VC,[2,101]),{9:$VB,21:$Vh,23:[1,119],25:85,30:$V5,34:109,36:86,61:$V6,62:$V7,63:$V8,64:$V9,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm},{24:[1,120]},{10:[1,121],24:[1,122]},o($VE,[2,28]),{9:$VI,12:[1,124],17:132,18:131,25:21,27:123,30:$V5,40:125,41:126,42:127,43:128,44:129,45:130,46:133,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,56:$VP,61:$V6,62:$V7,63:$V8,64:$V9},o($Vb,[2,25]),o($VE,[2,30],{35:[1,142]}),o($VE,[2,33]),{31:[1,143]},{9:$VB,21:$Vh,23:[1,144],25:85,30:$V5,34:109,36:86,61:$V6,62:$V7,63:$V8,64:$V9,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm},o($Vg,[2,42],{35:[1,145]}),{24:[1,146]},o($VD,[2,47]),{24:[1,147]},o($Vf,[2,17]),{9:$VI,12:[1,149],17:132,18:131,25:21,27:148,30:$V5,40:125,41:126,42:127,43:128,44:129,45:130,46:133,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,56:$VP,61:$V6,62:$V7,63:$V8,64:$V9},o($Vb,[2,24]),{9:$VI,12:[1,150],17:132,18:131,25:21,30:$V5,40:151,41:126,42:127,43:128,44:129,45:130,46:133,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,56:$VP,61:$V6,62:$V7,63:$V8,64:$V9},o($Vb,[2,23]),o($VQ,[2,49]),o($VQ,[2,50]),o($VQ,[2,51]),o($VQ,[2,52],{10:[1,152]}),o($VQ,[2,53]),o($VQ,[2,54]),o($VQ,[2,55]),o($VQ,[2,56]),o($VQ,[2,57]),{24:[1,153]},{24:[1,154]},{9:$VB,21:$Vh,24:[1,156],36:155,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm},{21:[1,157]},{21:[1,158]},{21:[1,159]},{57:[1,160]},{21:[1,161],39:$Ve},o($VE,[2,31]),{32:[1,162]},o($Vg,[2,40],{35:[1,163]}),o($Vg,[2,41]),o($VD,[2,46]),o($Vf,[2,16]),{9:$VI,12:[1,164],17:132,18:131,25:21,30:$V5,40:151,41:126,42:127,43:128,44:129,45:130,46:133,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,56:$VP,61:$V6,62:$V7,63:$V8,64:$V9},o($Vb,[2,22]),o($Vb,[2,21]),o($VQ,[2,48]),{9:$VI,12:[1,166],17:132,18:131,25:21,27:165,30:$V5,40:125,41:126,42:127,43:128,44:129,45:130,46:133,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,56:$VP,61:$V6,62:$V7,63:$V8,64:$V9},o($VQ,[2,58]),o($VQ,[2,59]),{24:[1,167],65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},o($VQ,[2,61]),{17:168,25:21,30:$V5,61:$V6,62:$V7,63:$V8,64:$V9},{9:$VB,21:$Vh,36:169,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm},{9:$VB,21:$Vh,36:170,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm},{58:[1,171]},{9:$VB,21:$Vh,22:172,23:[1,173],25:85,30:$V5,34:84,36:86,61:$V6,62:$V7,63:$V8,64:$V9,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm},{33:[1,174]},o($Vg,[2,39]),o($Vb,[2,20]),{9:$VI,12:[1,175],17:132,18:131,25:21,30:$V5,40:151,41:126,42:127,43:128,44:129,45:130,46:133,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,56:$VP,61:$V6,62:$V7,63:$V8,64:$V9},{51:[1,176]},o($VQ,[2,60]),{24:[1,177]},{23:[1,178],65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},{23:[1,179],65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},{57:[1,180]},{9:$VB,21:$Vh,23:[1,181],25:85,30:$V5,34:109,36:86,61:$V6,62:$V7,63:$V8,64:$V9,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm},{24:[1,182]},{23:[1,183]},{51:[1,184]},{21:[1,185]},{9:$VB,21:$Vh,36:186,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm},{10:[1,187]},{10:[1,188]},{59:[1,189],60:[1,190]},{24:[1,191]},o($VQ,[2,79]),{10:[1,192]},{21:[1,193]},{9:$VB,21:$Vh,36:194,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm},{24:[1,195],65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},{9:$VI,12:[1,197],17:132,18:131,25:21,27:196,30:$V5,40:125,41:126,42:127,43:128,44:129,45:130,46:133,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,56:$VP,61:$V6,62:$V7,63:$V8,64:$V9},{9:$VI,12:[1,199],17:132,18:131,25:21,27:198,30:$V5,40:125,41:126,42:127,43:128,44:129,45:130,46:133,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,56:$VP,61:$V6,62:$V7,63:$V8,64:$V9},{21:[1,200]},{21:[1,201]},o($VQ,[2,78]),{9:$VI,12:[1,203],17:132,18:131,25:21,27:202,30:$V5,40:125,41:126,42:127,43:128,44:129,45:130,46:133,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,56:$VP,61:$V6,62:$V7,63:$V8,64:$V9},{9:$VB,21:$Vh,36:204,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm},{23:[1,205],65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},{9:$VB,21:$Vh,36:206,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm},{9:$VI,12:[1,207],17:132,18:131,25:21,30:$V5,40:151,41:126,42:127,43:128,44:129,45:130,46:133,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,56:$VP,61:$V6,62:$V7,63:$V8,64:$V9},o($VQ,[2,65]),{9:$VI,12:[1,208],17:132,18:131,25:21,30:$V5,40:151,41:126,42:127,43:128,44:129,45:130,46:133,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,56:$VP,61:$V6,62:$V7,63:$V8,64:$V9},o($VQ,[2,71],{53:209,54:210,55:$VR}),{9:$VB,21:$Vh,36:212,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm},{9:$VB,21:$Vh,23:[1,214],36:213,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm},{9:$VI,12:[1,215],17:132,18:131,25:21,30:$V5,40:151,41:126,42:127,43:128,44:129,45:130,46:133,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,56:$VP,61:$V6,62:$V7,63:$V8,64:$V9},o($Vb,[2,27]),{23:[1,216],65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},{24:[1,217]},{23:[1,218],65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},o($VQ,[2,64]),o($VQ,[2,70],{54:210,53:219,55:$VR}),o($VQ,[2,69],{54:220,55:$VR}),o($VS,[2,73]),{10:[1,222],52:[1,221]},{23:[1,223],65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},{23:[1,224],65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},{24:[1,225]},o($Vb,[2,26]),{24:[1,226]},o($VT,[2,67]),{10:[1,227]},o($VQ,[2,68],{54:220,55:$VR}),o($VS,[2,72]),{21:[1,228]},{9:$VI,12:[1,230],17:132,18:131,25:21,27:229,30:$V5,40:125,41:126,42:127,43:128,44:129,45:130,46:133,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,56:$VP,61:$V6,62:$V7,63:$V8,64:$V9},{24:[1,231]},{24:[1,232]},o($VQ,[2,82]),o($VT,[2,66]),{9:$VI,12:[1,234],17:132,18:131,25:21,27:233,30:$V5,40:125,41:126,42:127,43:128,44:129,45:130,46:133,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,56:$VP,61:$V6,62:$V7,63:$V8,64:$V9},{9:$VB,21:$Vh,36:235,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm},{9:$VI,12:[1,236],17:132,18:131,25:21,30:$V5,40:151,41:126,42:127,43:128,44:129,45:130,46:133,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,56:$VP,61:$V6,62:$V7,63:$V8,64:$V9},o($VS,[2,77]),o($VQ,[2,80]),o($VQ,[2,81]),{9:$VI,12:[1,237],17:132,18:131,25:21,30:$V5,40:151,41:126,42:127,43:128,44:129,45:130,46:133,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,56:$VP,61:$V6,62:$V7,63:$V8,64:$V9},o($VQ,[2,63]),{23:[1,238],65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},o($VS,[2,76]),o($VQ,[2,62]),{10:[1,239]},{9:$VI,12:[1,241],17:132,18:131,25:21,27:240,30:$V5,40:125,41:126,42:127,43:128,44:129,45:130,46:133,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,56:$VP,61:$V6,62:$V7,63:$V8,64:$V9},{9:$VI,12:[1,242],17:132,18:131,25:21,30:$V5,40:151,41:126,42:127,43:128,44:129,45:130,46:133,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,56:$VP,61:$V6,62:$V7,63:$V8,64:$V9},o($VS,[2,75]),o($VS,[2,74])],
defaultActions: {6:[2,1],23:[2,83],24:[2,84],25:[2,85],26:[2,86],27:[2,87],36:[2,18],37:[2,19]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const TIPO_OPERACION	= require('../AST/Instrucciones/Instruccion').TIPO_OPERACION;
	const TIPO_VALOR 		= require('../AST/Instrucciones/Instruccion').TIPO_VALOR;
	const instruccionesAPI	= require('../AST/Instrucciones/Instruccion').instruccionesAPI;
    let CErrores=require('../AST/Error');
    let CNodoError=require('../AST/NodoError');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 7;
break;
case 1:return 8;
break;
case 2:return 13;
break;
case 3:return 26;
break;
case 4:return 50;
break;
case 5:return 51;
break;
case 6:return 'PR_do';
break;
case 7:return 52;
break;
case 8:return 55;
break;
case 9:return 47;
break;
case 10:return 48;
break;
case 11:return 49;
break;
case 12:return 61;
break;
case 13:return 62;
break;
case 14:return 63;
break;
case 15:return 30;
break;
case 16:return 64;
break;
case 17:return 81;
break;
case 18:return 82;
break;
case 19:return 28;
break;
case 20:return 29;
break;
case 21:return 33;
break;
case 22:return 56;
break;
case 23:return 58;
break;
case 24:return 59;
break;
case 25:return 60; 
break;
case 26:return 78;
break;
case 27:  return 9;  
break;
case 28: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 79; 
break;
case 29: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 80; 
break;
case 30:return  'LL_ABRE';
break;
case 31:return  'LL_CIERRA';
break;
case 32:return  'P_ABRE';
break;
case 33:return  'P_CIERRA';
break;
case 34:return  'C_ABRE';
break;
case 35:return  'C_CIERRA';
break;
case 36:return  'Coma';
break;
case 37:return  'PyC';
break;
case 38:return  'Igual';
break;
case 39:return  'AND';
break;
case 40:return  'OR';
break;
case 41:return  'NOT';
break;
case 42:return  'XOR';
break;
case 43:return  'Menor';
break;
case 44:return  'Mayor';
break;
case 45:return  'MayorIgual';
break;
case 46:return  'MenorIgual';
break;
case 47:return  'IgualIgual';
break;
case 48:return  'Distinto';
break;
case 49:return  'Mas';
break;
case 50:return  'Menos';
break;
case 51:return  'Multiplicacion';
break;
case 52:return  'Division';
break;
case 53:return  'Adicion';
break;
case 54:return  'Sustraccion';
break;
case 55:return  'Punto';
break;
case 56:  /*Los Ignoramos*/   
break;
case 57:  return 5;   
break;
case 58:CErrores.Errores.add(new CNodoError.NodoError("Lexico", "No se esperaba el caracter: "+yy_.yytext,yy_.yylineno, yy_.yylloc.first_column))
break;
}
},
rules: [/^(?:\/\/.*[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/]public\b)/i,/^(?:class\b)/i,/^(?:interface\b)/i,/^(?:void\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:int\b)/i,/^(?:boolean\b)/i,/^(?:double\b)/i,/^(?:String\b)/i,/^(?:char\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:static\b)/i,/^(?:main\b)/i,/^(?:args\b)/i,/^(?:System\b)/i,/^(?:out\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:"[^\"]*")/i,/^(?:'[^\']*')/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:,)/i,/^(?:;)/i,/^(?:=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\^)/i,/^(?:<)/i,/^(?:>)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\.)/i,/^(?:[ \t\r\n\f])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}